title Tank Game


Game->Game: run()
Game->Game: renderWelcome()
loop Until player presses 'P'
    Game->Game: renderWelcome()
end

loop While window is open
    Game->Game: updatePollEvents()
    alt If player is alive
        Game->Game: update()
    end
    Game->Game: render()
end

Game->Game: update()
Game->Game: updateInput()
alt If attack is possible
    Game->Player: canAttack()
    Player-->Game: return bool
    alt If true
        Game->Bullet: create Bullet()
        Bullet->Bullet: update()
    end
end

Player->Player: update()

Game->Game: updateCollision()
alt If player collides with boundaries
    Game->Player: setPosition()
end

Game->Game: updateBullets()
loop For each bullet
    Bullet->Bullet: update()
    alt If bullet goes out of bounds
        Game->Bullet: delete bullet
    end
end

Game->Game: updateEnemies()
Game->Enemy: update()
alt If enemy collides with player
    Enemy->Player: loseHp()
    Game->Enemy: delete enemy
end
loop For each bullet
    alt If enemy collides with bullet
        Enemy->Player: loseHp()
        Game->Enemy: delete enemy
        Game->Bullet: delete bullet
    end
end

Game->Game: updateCombat()
Game->Game: updateGUI()
Game->Game: updateWorld()

Game->Game: render()
Game->Game: renderWorld()
Player->Player: render()
loop For each bullet
    Bullet->Bullet: render()
end
loop For each enemy
    Enemy->Enemy: render()
end
Game->Game: renderGUI()
alt If player is dead
    Game->Game: show Game Over screen
end


// Báº£n 2

Actor (User) -> Game: run()
activate Game

Game -> Game: initWindow()
Game -> Game: initWelcome()
Game -> Game: initTextures()
Game -> Game: initGUI()
Game -> Game: initWorld()
Game -> Game: initSystems()
Game -> Game: initPlayer()
Game -> Game: initEnemies()

loop Welcome Screen
    Game -> Game: renderWelcome()
    Game --> Actor: Display welcome screen
end

loop Game Loop
    Game -> Game: updatePollEvents()
    
    alt Player is alive
        Game -> Game: updateInput()
        alt Key A pressed
            Game -> Player: move(-1.f, 0.f)
        else Key D pressed
            Game -> Player: move(1.f, 0.f)
        else Key W pressed
            Game -> Player: move(0.f, -1.f)
        else Key S pressed
            Game -> Player: move(0.f, 1.f)
        end
        
        alt Left mouse button pressed && Player can attack
            Game -> Player: canAttack()
            Game -> Bullet: new Bullet()
            Game -> Game: bullets.push_back()
        end
        
        Game -> Player: update()
        Game -> Game: updateCollision()
        Game -> Game: updateBullets()
        loop for each Bullet
            Game -> Bullet: update()
            alt Bullet out of screen
                Game -> Game: delete Bullet
            end
        end
        
        Game -> Game: updateEnemies()
        alt Spawn timer reached
            Game -> Enemy: new Enemy()
            Game -> Game: enemies.push_back()
        end
        loop for each Enemy
            Game -> Enemy: update()
            alt Enemy out of screen
                Game -> Game: delete Enemy
            else Enemy collides with Player
                Game -> Player: loseHp()
                Game -> Game: delete Enemy
            end
        end
        
        Game -> Game: updateCombat()
        loop for each Enemy
            loop for each Bullet
                alt Enemy collides with Bullet
                    Game -> Game: delete Enemy
                    Game -> Game: delete Bullet
                    Game -> Game: update points
                end
            end
        end
        
        Game -> Game: updateGUI()
        Game -> Game: updateWorld()
        
        Game -> Game: render()
        Game -> Game: renderWorld()
        Game -> Player: render()
        loop for each Bullet
            Game -> Bullet: render()
        end
        loop for each Enemy
            Game -> Enemy: render()
        end
        Game -> Game: renderGUI()
        
        alt Player HP <= 0
            Game -> Game: draw gameOverText
            alt Left mouse button pressed
                Game -> Game: initPlayer()
                Game -> Game: initEnemies()
                Game -> Game: initSystems()
            end
        end
        
        Game --> Actor: Display updated game state
    end
end

deactivate Game
